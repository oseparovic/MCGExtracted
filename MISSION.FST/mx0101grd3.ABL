//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:10/5/98   BY:Mike Lee
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBmx0101grd3 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;

         // Paths

         Path1[0,0] = 2080; // X
         Path1[0,1] = -800; // Y

         Path1[1,0] = 2145; // X
         Path1[1,1] = -1520; // Y

         Path1[2,0] = 1221; // X
         Path1[2,1] = -1400; // Y

         Path1[3,0] = 1315; // X
         Path1[3,1] = -720; // Y

         SetMinimumDistance(10);
         SetTactic(TACTIC_RIGHT_FLANK);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (numDead(CLAN_STAR0) >= 1) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (beenHit) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(PLAYER_FORCE,currentx,currenty,225)) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Flag4 = TRUE;
              Order4Status = SUCCESS;
         endif;
    endif;
    if (getTarget(CUR_OBJECT_ID) > 0) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Flag4 = TRUE;
              Order5Status = SUCCESS;
         endif;
    endif;
    if (flag4) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Order6Status = Attack;
              if (Order6Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if (NOT flag2) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Order7Status = Attack;
              if (Order7Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if (flag2) then
         // Order  8 
         if (Order8Status == INCOMPLETE) then
              Order8Status = Escort(getVehicleID(CLAN_FORCE, 1,0),EAST);
              if (Order8Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
