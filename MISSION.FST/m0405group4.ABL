//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/14/98   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0405group4 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;
    static integer                     Order10Status;
    static integer                     Order11Status;
    static integer                     Order12Status;

    // PATHS
    static path                        Path1;
    static path                        path2;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;
         Order10Status = INCOMPLETE;
         Order11Status = INCOMPLETE;
         Order12Status = INCOMPLETE;

         // Paths

         Path1[0,0] = -691; // X
         Path1[0,1] = -6988; // Y

         Path1[1,0] = -10165; // X
         Path1[1,1] = 1237; // Y

         path2[0,0] = 1327; // X
         path2[0,1] = -1200; // Y

         path2[1,0] = -10165; // X
         path2[1,1] = 1237; // Y

         SetDisEngageRadius(500);
         MoveAndFireON;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (flag7) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              ResetPath;
              Order2Status = SUCCESS;
         else
              if (Order2Status == SUCCESS) then
                   // Order  3 
                   if (Order3Status == INCOMPLETE) then
                        Order3Status = MovePath(Path1,2);
                        if (Order3Status == INCOMPLETE) then
                             return(1);
                        endif;
                   else
                        if (Order3Status == SUCCESS) then
                             // Order  11 
                             if (Order11Status == INCOMPLETE) then
                                  Order11Status = Withdraw;
                                  if (Order11Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (flag8) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              ResetPath;
              Order4Status = SUCCESS;
         else
              if (Order4Status == SUCCESS) then
                   // Order  5 
                   if (Order5Status == INCOMPLETE) then
                        Order5Status = MovePath(path2,2);
                        if (Order5Status == INCOMPLETE) then
                             return(1);
                        endif;
                   else
                        if (Order5Status == SUCCESS) then
                             // Order  12 
                             if (Order12Status == INCOMPLETE) then
                                  Order12Status = Withdraw;
                                  if (Order12Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if ((not flag3) and (not flag4) and (getTarget(CUR_OBJECT_ID) > 0) and (NumPlayerInArea(currentx,currenty, 250) > 2)) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Flag7 = TRUE;
              Order6Status = SUCCESS;
         endif;
    endif;
    if ((flag3) and (not flag4) and (getTarget(CUR_OBJECT_ID) > 0) and (NumPlayerInArea(currentx,currenty, 250) > 2)) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Flag8 = TRUE;
              Order7Status = SUCCESS;
         endif;
    endif;
    if (beenHit) then
         // Order  9 
         if (Order9Status == INCOMPLETE) then
              Flag5 = TRUE;
              Order9Status = SUCCESS;
         endif;
    endif;
    if (flag5) then
         // Order  10 
         if (Order10Status == INCOMPLETE) then
              SetSpeed(RUN);
              Order10Status = SUCCESS;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = MoveTo(-1860,9526);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status == SUCCESS) then
                   // Order  8 
                   if (Order8Status == INCOMPLETE) then
                        Order8Status = Withdraw;
                        if (Order8Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
