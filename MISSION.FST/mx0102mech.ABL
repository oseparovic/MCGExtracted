//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:11/1/98   BY:rob nicholls
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBmx0102mech : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;

    // PATHS
    static path                        FinalPatrol;
    static path                        Mechpath;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;

         // Paths

         FinalPatrol[0,0] = -3145; // X
         FinalPatrol[0,1] = -825; // Y

         FinalPatrol[1,0] = -3000; // X
         FinalPatrol[1,1] = -1625; // Y

         FinalPatrol[2,0] = -1845; // X
         FinalPatrol[2,1] = -1980; // Y

         FinalPatrol[3,0] = -735; // X
         FinalPatrol[3,1] = -3625; // Y

         FinalPatrol[4,0] = 4150; // X
         FinalPatrol[4,1] = -410; // Y

         Mechpath[0,0] = -3170; // X
         Mechpath[0,1] = 2875; // Y

         Mechpath[1,0] = -3144; // X
         Mechpath[1,1] = -826; // Y

         Mechpath[2,0] = -2997; // X
         Mechpath[2,1] = -1627; // Y

         Mechpath[3,0] = -1843; // X
         Mechpath[3,1] = -1981; // Y

         Mechpath[4,0] = -734; // X
         Mechpath[4,1] = -3626; // Y

         Mechpath[5,0] = 4147; // X
         Mechpath[5,1] = -413; // Y

         SetEngageRadius(250);
         SetTactic(TACTIC_MEDIUM);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (numDead(ClanStar(1)) >= 2) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              SetSpeed(RUN);
              Order5Status = SUCCESS;
         endif;
    endif;
    if (numDead(ClanStar(1)) >= 2) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              MoveAndFireON;
              Order6Status = SUCCESS;
         endif;
    endif;
    if (gametime > 460) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Order2Status = Guard(HQ);
              if (Order2Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order2Status <> INCOMPLETE) then
                   // Order  3 
                   if (Order3Status == INCOMPLETE) then
                        Order3Status = ClearArea;
                        if (Order3Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (numDead(ClanStar(1)) >= 2) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Order4Status = Guard(RuinTC);
              if (Order4Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Patrol(Mechpath,6,PATROL_AND_STOP, 1);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
