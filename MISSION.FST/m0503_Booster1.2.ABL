//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/14/98   BY:Mike Lee
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0503_Booster1.2 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;
    static integer                     Order10Status;
    static integer                     Order11Status;
    static integer                     Order12Status;
    static integer                     Order13Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;
         Order10Status = INCOMPLETE;
         Order11Status = INCOMPLETE;
         Order12Status = INCOMPLETE;
         Order13Status = INCOMPLETE;

         // Paths

         Path1[0,0] = 160; // X
         Path1[0,1] = -1700; // Y

         Path1[1,0] = 160; // X
         Path1[1,1] = -3750; // Y

         SetSpeed(RUN);
         SetMinimumDistance(90);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (flag7) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              SetDisengageRadius(450);
              Order2Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(PLAYER_FORCE,-1940,5175,150)) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_b1) > 0) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order4Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_b2) > 0) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order5Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_b3) > 0) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order6Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_b4) > 0) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order7Status = SUCCESS;
         endif;
    endif;
    if (checkObjectiveStatus(1) == 1) then
         // Order  10 
         if (Order10Status == INCOMPLETE) then
              Flag5 = TRUE;
              Order10Status = SUCCESS;
         endif;
    endif;
    if (flag5) then
         // Order  11 
         if (Order11Status == INCOMPLETE) then
              SetEngageRadius(10000);
              Order11Status = SUCCESS;
         else
              if (Order11Status <> INCOMPLETE) then
                   // Order  12 
                   if (Order12Status == INCOMPLETE) then
                        SetDisengageRadius(10000);
                        Order12Status = SUCCESS;
                   else
                        if (Order12Status <> INCOMPLETE) then
                             // Order  13 
                             if (Order13Status == INCOMPLETE) then
                                  Order13Status = Attack;
                                  if (Order13Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (flag2) then
         // Order  8 
         if (Order8Status == INCOMPLETE) then
              Order8Status = MoveTo(-2113,4670);
              if (Order8Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order8Status == SUCCESS) then
                   // Order  9 
                   if (Order9Status == INCOMPLETE) then
                        Order9Status = Sentry(-1880,5220);
                        if (Order9Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
