//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:2/5/99   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBmx0104hqambush : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;
    static integer                     Order10Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;
         Order10Status = INCOMPLETE;

         // Paths

         Path1[0,0] = -3320; // X
         Path1[0,1] = 254; // Y

         Path1[1,0] = -2929; // X
         Path1[1,1] = 394; // Y

         Path1[2,0] = -1975; // X
         Path1[2,1] = 1089; // Y

         SetEngageRadius(500);
         SetDisEngageRadius(700);
         SetSpeed(RUN);
         MoveAndFireON;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (gametime > 2) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              orderPowerDown;
              Order1Status = SUCCESS;
         endif;
    endif;
    if (beenHit) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag8 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(PLAYER_FORCE,currentx,currenty,225.0)) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag8 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if ((flag8) or (GeneralAlarm)) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              orderPowerUp;
              Order4Status = SUCCESS;
         else
              if (Order4Status <> INCOMPLETE) then
                   // Order  5 
                   if (Order5Status == INCOMPLETE) then
                        Order5Status = MoveTo(-4307,78);
                        if (Order5Status == INCOMPLETE) then
                             return(1);
                        endif;
                   else
                        if ((Order5Status <> INCOMPLETE) and (not GeneralAlarm)) then
                             // Order  6 
                             if (Order6Status == INCOMPLETE) then
                                  Order6Status = Attack;
                                  if (Order6Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                        if ((Order5Status <> INCOMPLETE) and (GeneralAlarm)) then
                             // Order  8 
                             if (Order8Status == INCOMPLETE) then
                                  Order8Status = MovePath(Path1,3);
                                  if (Order8Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             else
                                  if (Order8Status <> INCOMPLETE) then
                                       // Order  9 
                                       if (Order9Status == INCOMPLETE) then
                                            Order9Status = Attack;
                                            if (Order9Status == INCOMPLETE) then
                                                 return(1);
                                            endif;
                                       endif;
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (flag8) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              SetRevealed(1,50.0,CurrentPosition);
              Order7Status = SUCCESS;
         endif;
    endif;

    if (TRUE) then
         // Order  10 
         if (Order10Status == INCOMPLETE) then
              Order10Status = Attack;
              if (Order10Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
