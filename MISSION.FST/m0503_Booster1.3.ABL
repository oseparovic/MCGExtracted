//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/14/98   BY:Mike Lee
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0503_Booster1.3 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;
    static integer                     Order10Status;
    static integer                     Order11Status;
    static integer                     Order12Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;
         Order10Status = INCOMPLETE;
         Order11Status = INCOMPLETE;
         Order12Status = INCOMPLETE;

         // Paths

         Path1[0,0] = 160; // X
         Path1[0,1] = -1700; // Y

         Path1[1,0] = 160; // X
         Path1[1,1] = -3750; // Y

         SetEngageRadius(300);
         SetDisEngageRadius(300);
         SetSpeed(RUN);
         SetConcentrateFireMod(10);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (inHotSpot(PLAYER_FORCE,-1000,-3600,150)) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag3 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_g1) > 0) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag3 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_g2) > 0) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Flag3 = TRUE;
              Order4Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_g3) > 0) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Flag3 = TRUE;
              Order5Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(pow_g4) > 0) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Flag3 = TRUE;
              Order6Status = SUCCESS;
         endif;
    endif;
    if (checkObjectiveStatus(2) == 1) then
         // Order  9 
         if (Order9Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order9Status = SUCCESS;
         endif;
    endif;
    if (flag6) then
         // Order  10 
         if (Order10Status == INCOMPLETE) then
              SetEngageRadius(10000);
              Order10Status = SUCCESS;
         else
              if (Order10Status <> INCOMPLETE) then
                   // Order  11 
                   if (Order11Status == INCOMPLETE) then
                        SetDisengageRadius(10000);
                        Order11Status = SUCCESS;
                   else
                        if (Order11Status <> INCOMPLETE) then
                             // Order  12 
                             if (Order12Status == INCOMPLETE) then
                                  Order12Status = Attack;
                                  if (Order12Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (flag3) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Order7Status = MoveTo(-500,-4500);
              if (Order7Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order7Status == SUCCESS) then
                   // Order  8 
                   if (Order8Status == INCOMPLETE) then
                        Order8Status = Sentry(-500,-4500);
                        if (Order8Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
