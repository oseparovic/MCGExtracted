//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:4/28/98   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0205rom3 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;

         SetDisEngageRadius(750);
         SetSpeed(RUN);
         SetMinimumDistance(100);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (inHotSpot(512000,833,-3577,75.0)) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(me,794,-11189,100.0)) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Flag1 = TRUE;
              Order4Status = SUCCESS;
         endif;
    endif;
    if (flag6) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Order2Status = Escort(512000,NORTH);
              if (Order2Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order2Status == FAILED) then
                   // Order  6 
                   if (Order6Status == INCOMPLETE) then
                        Flag7 = TRUE;
                        Order6Status = SUCCESS;
                   endif;
              endif;
         endif;
    endif;
    if (flag1) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Order5Status = Attack;
              if (Order5Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if (flag7) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Order7Status = Attack;
              if (Order7Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
