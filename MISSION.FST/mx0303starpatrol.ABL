//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:11/18/98   BY:rob nicholls
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBmx0303starpatrol : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;

    // PATHS
    static path                        Starpath;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;

         // Paths

         Starpath[0,0] = 575; // X
         Starpath[0,1] = 4711; // Y

         Starpath[1,0] = -1986; // X
         Starpath[1,1] = 2871; // Y

         Starpath[2,0] = -3968; // X
         Starpath[2,1] = -802; // Y

         Starpath[3,0] = -439; // X
         Starpath[3,1] = -818; // Y

         Starpath[4,0] = 2938; // X
         Starpath[4,1] = -2584; // Y

         Starpath[5,0] = 3666; // X
         Starpath[5,1] = 921; // Y

         SetEngageRadius(250);
         SetSpeed(RUN);
         SetMinimumDistance(40);
         StickToTargetON;
         SetConcentrateFireMod(3.1);
         SetTactic(TACTIC_REAR);
         SelectWeakest;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (flag2) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              SetDisengageRadius(450);
              Order3Status = SUCCESS;
         endif;
    endif;
    if (flag2) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              SetEngageRadius(350);
              Order4Status = SUCCESS;
         endif;
    endif;
    if (getTarget(CUR_OBJECT_ID) > 0) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order5Status = SUCCESS;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Patrol(Starpath,6,PATROL_CIRCLE, 999);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status <> INCOMPLETE) then
                   // Order  2 
                   if (Order2Status == INCOMPLETE) then
                        Order2Status = Patrol(Starpath,6,PATROL_CIRCLE,999);
                        if (Order2Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
