//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:2/11/99   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBmx0103Ambush : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;

    // PATHS
    static path                        ExtractionPatrol;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;

         // Paths

         ExtractionPatrol[0,0] = 675; // X
         ExtractionPatrol[0,1] = 5940; // Y

         ExtractionPatrol[1,0] = -960; // X
         ExtractionPatrol[1,1] = 5940; // Y

         ExtractionPatrol[2,0] = -960; // X
         ExtractionPatrol[2,1] = 5565; // Y

         SetEngageRadius(150);
         SetDisEngageRadius(550);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if ((getTarget(CUR_OBJECT_ID) > 0) or (flag6)) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              SetEngageRadius(400);
              Order3Status = SUCCESS;
         endif;
    endif;
    if ((getTarget(CUR_OBJECT_ID) > 0) or (flag6)) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              SetSpeed(RUN);
              Order4Status = SUCCESS;
         endif;
    endif;
    if (beenHit) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order5Status = SUCCESS;
         endif;
    endif;
    if (getHits >= 6) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Order6Status = Attack;
              if (Order6Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Patrol(ExtractionPatrol,3,PATROL_BACK_AND_FORTH, 8000000);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status == FAILED) then
                   // Order  2 
                   if (Order2Status == INCOMPLETE) then
                        Order2Status = Attack;
                        if (Order2Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
