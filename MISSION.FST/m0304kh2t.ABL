//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/8/98   BY:Tim Ryan
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0304kh2t : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;

    // PATHS
    static path                        KingHill;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;

         // Paths

         KingHill[0,0] = -2139; // X
         KingHill[0,1] = 2598; // Y

         KingHill[1,0] = -2992; // X
         KingHill[1,1] = 2692; // Y

         KingHill[2,0] = -4650; // X
         KingHill[2,1] = 1713; // Y

         KingHill[3,0] = -5454; // X
         KingHill[3,1] = -151; // Y

         SetEngageRadius(200);
         SetDisEngageRadius(10000);
         SetSpeed(RUN);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (checkObjectiveStatus(0) == SUCCESS) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              SetEngageRadius(10000);
              Order4Status = SUCCESS;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = MovePath(KingHill,4);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status <> INCOMPLETE) then
                   // Order  2 
                   if (Order2Status == INCOMPLETE) then
                        SetEngageRadius(350);
                        Order2Status = SUCCESS;
                   else
                        if (Order2Status <> INCOMPLETE) then
                             // Order  3 
                             if (Order3Status == INCOMPLETE) then
                                  Order3Status = Attack;
                                  if (Order3Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
