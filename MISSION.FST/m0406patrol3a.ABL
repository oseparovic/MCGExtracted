//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:1/6/98   BY:Duri Price
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0406patrol3a : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;

         // Paths

         Path1[0,0] = 998; // X
         Path1[0,1] = -193; // Y

         Path1[1,0] = 5621; // X
         Path1[1,1] = -4272; // Y

         SetEngageRadius(122);
         SetDisEngageRadius(155);
         MoveToEngageOFF;
         StopFighting;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (inHotSpot(PLAYER_FORCE,currentx,currenty,70)) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              StopFighting;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(PLAYER_FORCE,currentx,currenty,70)) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              MoveTo(8040,-270);
              Order3Status = SUCCESS;
         else
              if (Order3Status <> INCOMPLETE) then
                   // Order  6 
                   if (Order6Status == INCOMPLETE) then
                        Attack;
                        Order6Status = SUCCESS;
                   endif;
              endif;
              if (Order3Status <> INCOMPLETE) then
                   // Order  7 
                   if (Order7Status == INCOMPLETE) then
                        GeneralAlarm = TRUE;
                        Order7Status = SUCCESS;
                   endif;
              endif;
              if (Order3Status <> INCOMPLETE) then
                   // Order  9 
                   if (Order9Status == INCOMPLETE) then
                        StartFighting;
                        Order9Status = SUCCESS;
                   endif;
              endif;
         endif;
    endif;
    if (Order2Status <> INCOMPLETE) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              SetEngageRadius(150);
              Order4Status = SUCCESS;
         endif;
    endif;
    if (Order2Status <> INCOMPLETE) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              MoveTo(386,-2085);
              Order5Status = SUCCESS;
         else
              if (Order5Status <> INCOMPLETE) then
                   // Order  8 
                   if (Order8Status == INCOMPLETE) then
                        Attack;
                        Order8Status = SUCCESS;
                   endif;
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Patrol(Path1,4,PATROL_CIRCLE, 500);
              Order1Status = SUCCESS;
         endif;
    endif;

         return(1);
endmodule.
