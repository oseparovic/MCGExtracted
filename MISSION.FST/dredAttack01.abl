//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:11/3/98   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1999 Microsoft Corporation
//
//****************************************************************************************//

module AttackBrain : integer;

		/*********************************************************************
		 The following brain cells must be loaded:

         R_ENGAGE_RADIUS		cell 2, real --> radius in meters
         I_MOVE_SPEED			cell 9, integer --> 1 = FAST, 0 = SLOW
		 I_TACTIC				cell 28, integer --> 0 thru 20

		 *********************************************************************/

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;

//----------------------------------------------------------------------------------------
function Init;
var

		integer		speed;
		integer		tactic;
		real		engageRadius;

    code
		speed = getIntegerMemory(I_MOVE_SPEED);
		tactic = getIntegerMemory(I_TACTIC);
		engageRadius = getRealMemory(R_ENGAGE_RADIUS);
	
		Orders.defaultBrainInit;

		SetSpeed(speed == 1);
		SetTactic(tactic);
		SetEngageRadius(engageRadius);
        SetDisEngageRadius(650);
   		

		Orders.initOrders;         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
