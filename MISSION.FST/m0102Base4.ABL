//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/30/98   BY:Rob Nicholls
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0102Base4 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;

    // PATHS
    static path                        HollanderPatrol;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;

         // Paths

         HollanderPatrol[0,0] = -3556; // X
         HollanderPatrol[0,1] = -143; // Y

         HollanderPatrol[1,0] = -3677; // X
         HollanderPatrol[1,1] = -1690; // Y

         HollanderPatrol[2,0] = -1884; // X
         HollanderPatrol[2,1] = -2588; // Y

         HollanderPatrol[3,0] = 37; // X
         HollanderPatrol[3,1] = 487; // Y

         HollanderPatrol[4,0] = -115; // X
         HollanderPatrol[4,1] = 3783; // Y

         HollanderPatrol[5,0] = -1941; // X
         HollanderPatrol[5,1] = 4952; // Y

         SetEngageRadius(250);
         SetDisEngageRadius(750);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (beenHit) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(PLAYER_FORCE,-2175,4489,150)) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag2 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if (flag2) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              SetEngageRadius(450);
              Order4Status = SUCCESS;
         endif;
    endif;
    if (flag2) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Order5Status = Patrol(HollanderPatrol,6,PATROL_CIRCLE, 999);
              if (Order5Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if (gametime > 290) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Order6Status = Patrol(HollanderPatrol,6,PATROL_CIRCLE, 999);
              if (Order6Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
