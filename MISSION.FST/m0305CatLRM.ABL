//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/9/98   BY:Rob Nicholls
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0305CatLRM : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;

    // PATHS
    static path                        CatLRMPath;
    static path                        GoInBase;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;

         // Paths

         CatLRMPath[0,0] = -1111; // X
         CatLRMPath[0,1] = -5783; // Y

         CatLRMPath[1,0] = 19; // X
         CatLRMPath[1,1] = -5207; // Y

         CatLRMPath[2,0] = 928; // X
         CatLRMPath[2,1] = -4065; // Y

         GoInBase[0,0] = 508; // X
         GoInBase[0,1] = -3305; // Y

         GoInBase[1,0] = 23; // X
         GoInBase[1,1] = -2748; // Y

         SetEngageRadius(200);
         IdentifySensorContactsOFF;
         SetSpeed(RUN);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = MovePath(CatLRMPath,3);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status <> INCOMPLETE) then
                   // Order  2 
                   if (Order2Status == INCOMPLETE) then
                        Order2Status = AttackObject(TC4,FALSE,TRUE);
                        if (Order2Status == INCOMPLETE) then
                             return(1);
                        endif;
                   else
                        if (Order2Status <> INCOMPLETE) then
                             // Order  3 
                             if (Order3Status == INCOMPLETE) then
                                  Order3Status = AttackObject(getTerrainObjectPartID(49,356),FALSE,TRUE);
                                  if (Order3Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             else
                                  if (Order3Status <> INCOMPLETE) then
                                       // Order  4 
                                       if (Order4Status == INCOMPLETE) then
                                            Order4Status = MovePath(GoInBase,2);
                                            if (Order4Status == INCOMPLETE) then
                                                 return(1);
                                            endif;
                                       else
                                            if (Order4Status <> INCOMPLETE) then
                                                 // Order  5 
                                                 if (Order5Status == INCOMPLETE) then
                                                      Order5Status = AttackObject(HQbldg,FALSE,TRUE);
                                                      if (Order5Status == INCOMPLETE) then
                                                           return(1);
                                                      endif;
                                                 endif;
                                            endif;
                                       endif;
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
