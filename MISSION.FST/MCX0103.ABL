//*********************************************************************************

module MissionBrain_1_3 : integer;

     //--------------------------------------------------------
     // Operation:  1                  Mission:  3 
     // MissionID:  250                Name: Goldilocks and the Three Bases
     // Designer: Mike Lee
     // Created: 2/15/99               By: Mike Lee
     //--------------------------------------------------------

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

          #include_ "misconst.abi"

          //------------------
          // Objective IDs
          //------------------
           OBJ0_CaptureDestroy_2_HQs_    = 0;
           OBJ1_Move_All_Units_to_Extra  = 1;
           OBJ2_CaptureDestroy_3_HQs_    = 2;
           OBJ3_Capture_Component_Vault  = 3;

//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type


//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
      var

            #include_ "1_3MXVR.ABI"

            static integer      ScenarioResult;
            eternal boolean     ExitTimerSet;
            static integer      VictoryLevel;
            char[40]            dstring;
            eternal real        gametime;
            static real         nextsecond;
            integer             x;
            integer             y;
            Position            aPoint;
            eternal boolean     PlayerForceDead;
            eternal boolean     ClanForceDead;
            eternal boolean     AlliedForceDead;
            eternal boolean     GeneralAlarm;
            eternal boolean     Flag1;
            eternal boolean     Flag2;
            eternal boolean     Flag3;
            eternal boolean     Flag4;
            eternal boolean     Flag5;
            eternal boolean     Flag6;
            eternal boolean     Flag7;
            eternal boolean     Flag8;
            eternal boolean     Flag9;
            eternal boolean     Flag10;
            static boolean      PlayPASound;
            static boolean      PlayGASound;
            eternal integer     GeneralAlarmCounter;
            boolean             PerimeterBreach;
            static boolean      Objective_0_Decided;
            static boolean      Objective_1_Decided;
            static boolean      Obj_1_Action_1_Success;
            static boolean      Obj_1_Action_2_Success;
            static boolean      Objective_2_Decided;
            static boolean      Obj_2_Action_1_Success;
            static boolean      Obj_2_Action_2_Success;
            static boolean      Objective_3_Decided;
            static boolean      Obj_3_Action_1_Success;
            static boolean      Obj_3_Action_2_Success;
            static boolean      Obj_3_Action_3_Success;

//------------------------------------------------------------------
//
//     Init Function    (automatically run first time through)
//
//------------------------------------------------------------------
function init;

       code

            ScenarioResult = PLAYING;
            PlayerForceDead = FALSE;
            ClanForceDead = FALSE;
            AlliedForceDead = FALSE;
            ExitTimerSet = FALSE;
            VictoryLevel = 0; // New Scheme
            NextSecond = 1.0;
            GeneralAlarmCounter = -1;
            GeneralAlarm = FALSE;
            Flag1 = FALSE;
            Flag2 = FALSE;
            Flag3 = FALSE;
            Flag4 = FALSE;
            Flag5 = FALSE;
            Flag6 = FALSE;
            Flag7 = FALSE;
            Flag8 = FALSE;
            Flag9 = FALSE;
            Flag10 = FALSE;
            PlayPASound = FALSE;
            PlayGASound = FALSE;
            Objective_0_Decided = FALSE;
            Objective_1_Decided = FALSE;
            Obj_1_Action_1_Success = FALSE;
            Obj_1_Action_2_Success = FALSE;
            Objective_2_Decided = FALSE;
            Obj_2_Action_1_Success = FALSE;
            Obj_2_Action_2_Success = FALSE;
            Objective_3_Decided = FALSE;
            Obj_3_Action_1_Success = FALSE;
            Obj_3_Action_2_Success = FALSE;
            Obj_3_Action_3_Success = FALSE;

            #include_ "1_3MXIN.ABI"

endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
      code

            //------------------------------------------------
            // Debug Window Game Clock Second Counter
            // Note:  This is used by some included functions.
            //------------------------------------------------
            gametime = gettime;
            If (gametime >= nextsecond) Then
                  nextsecond = gametime + 1;
                  If (GeneralAlarm) then
                       GeneralAlarmCounter = GeneralAlarmCounter + 1;
                  endif;
                  // dstring = "Gametime: ";
                  // concat(dstring,gametime);
                  // Print (dstring);
            endif;
            if ((PlayGASound) and (NextSecond == gametime + 1)) then
                  playSoundEffect(GENERAL_ALARM_SOUND);
            endif;
            if (PlayPASound) then
                  playSoundEffect(PERIMETER_ALARM_SOUND);
            endif;
            PerimeterBreach = FALSE;

            //---------------------------------------
            // Create Non-Existing Vehicles
            //---------------------------------------
            #include_ "1_3MXCR.ABI"

            //---------------------------------------
            // Activate inactive vehicles
            //---------------------------------------
            #include_ "1_3MXAC.ABI"

            //---------------------------------------
            // Structure
            //---------------------------------------
            #include_ "1_3MXST.ABI"

            //---------------------------------------
            // Lookout Points
            //---------------------------------------
            #include_ "1_3MXLP.ABI"

            //---------------------------------------
            // Force Dead Checks
            //---------------------------------------
            if (isDeadorFled(PLAYER_FORCE)) then
                  PlayerForceDead = TRUE;
            endif;
            if (isDeadorFled(CLAN_FORCE)) then
                  ClanForceDead = TRUE;
            endif;
            if (isDeadorFled(ALLIED_FORCE)) then
                  AlliedForceDead = TRUE;
            endif;

            //---------------------------------------
            // SET EXIT TIMER IF PLAYER DEAD/DISABLED
            //---------------------------------------

            if ((NOT ExitTimerSet) AND (PlayerForceDead)) then
                  // Fail any Undecided Player Objectives
                  if (checkObjectiveStatus(0) == INCOMPLETE) then
                        setObjectiveStatus(0, FAILED);
                  endif;
                  if (checkObjectiveStatus(1) == INCOMPLETE) then
                        setObjectiveStatus(1, FAILED);
                  endif;
                  if (checkObjectiveStatus(2) == INCOMPLETE) then
                        setObjectiveStatus(2, FAILED);
                  endif;
                  if (checkObjectiveStatus(3) == INCOMPLETE) then
                        setObjectiveStatus(3, FAILED);
                  endif;
            endif;

            //---------------------------------------
            // Custom ABL Code
            //---------------------------------------

            if ((isCaptured(RedBaseHQ) == 1) OR (isDead(RedBaseHQ))) then
                 //Set Red HQ as secured
                 RedHQSecure = TRUE;
                 Flag1 = RedHQSecure;
            endif;

            if ((isCaptured(BlueBaseHQ) == 1) OR (isDead(BlueBaseHQ))) then
                 //Set Blue HQ as secured
                 BlueHQSecure = TRUE;
            endif;

            if ((isCaptured(PurpleBaseHQ) == 1) OR (isDead(PurpleBaseHQ))) then
                 //Set Purple HQ as secured
                 PurpleHQSecure = TRUE;
                 Flag2 = PurpleHQSecure;
            endif;

            if ((isDead(CLAN_STAR0)) AND (isDead(CLAN_STAR3)) AND (isDead(CLAN_STAR6))) then
                 //Red Base defending mechs destroyed
                 RedMechsDead = TRUE;
            endif;

            if (isDead(CLAN_STAR1)) then
                 //Blue Base defending mechs destroyed
                 BlueMechsDead = TRUE;
            endif;

            if (isDead(CLAN_STAR2)) then
                 //Purple Base defending mechs destroyed
                 PurpleMechsDead = TRUE;
            endif;

            if ((RedHQSecure == TRUE) OR (BlueHQSecure == TRUE) OR (PurpleHQSecure == TRUE)) then
                 //Start checking if bases are taken
                 
                 if ( (RedHQSecure == TRUE) AND (RedMechsDead == TRUE) ) then
                       RedBaseSecure = TRUE;
                 endif;
                 
                 if ( (BlueHQSecure == TRUE) AND (BlueMechsDead == TRUE) ) then 
                       BlueBaseSecure = TRUE;
                 endif;
                 
                 if ( (PurpleHQSecure == TRUE) AND (PurpleMechsDead == TRUE) ) then
                       PurpleBaseSecure = TRUE;
                 endif;
            endif;

            if (((RedBaseSecure == TRUE) OR (BlueBaseSecure == TRUE) OR (PurpleBaseSecure == TRUE)) AND (PrimarySuccess == FALSE)) then
                 //Check for Primary Success
                 
                 if ( (RedBaseSecure == TRUE) AND (BlueBaseSecure == TRUE) ) then
                       PrimarySuccess = TRUE;
                 endif;
                 
                 if ( (PurpleBaseSecure == TRUE) AND (BlueBaseSecure == TRUE) ) then
                       PrimarySuccess = TRUE;
                 endif;
                 
                 if ( (RedBaseSecure == TRUE) AND (PurpleBaseSecure == TRUE) ) then
                       PrimarySuccess = TRUE;
                 endif;
            endif;

            if (PrimarySuccess == TRUE) then
                 //Check if all bases are captured
                 
                 if ( (RedBaseSecure == TRUE) AND (BlueBaseSecure == TRUE) ) AND (PurpleBaseSecure == TRUE) then
                       SecondarySuccess = TRUE;
                 endif;
            endif;

            //---------------------------------------
            // Objective Resolution
            //---------------------------------------

            if (checkObjectiveStatus(0) == INCOMPLETE) then

                 if (PrimarySuccess == TRUE) then
                       SetObjectiveStatus(0,SUCCESS);
                       playBetty(BETTY_OBJECTIVE_COMPLETE);
                       VictoryLevel = VictoryLevel + 1;
                       Objective_0_Decided = TRUE;
                       if (VictoryLevel < 2) then
                             PlayDigitalMusic(OBJECTIVE_SUCCESS_MUSIC);
                       endif;
                 else
                       if (gettimeleft == 0.0) then
                             SetObjectiveStatus(0,FAILED);
                             playBetty(BETTY_CANNOT_COMP_OBJ);
                             Objective_0_Decided = TRUE;
                       endif;
                 endif;

            else
                  if (NOT ExitTimerSet) then        
                        //if Failed primary Objective, fail mission
                        if (checkObjectiveStatus(0) == FAILED) then
                              setTimer(EXIT_TIMER,2.0);
                              ExitTimerSet = TRUE;
                        endif;
                  endif;
            endif;

            if ((checkObjectiveStatus(1) == INCOMPLETE) AND (Objective_0_Decided)) then

                 aPoint[0] = 702;
                 aPoint[1] = 5954;
                 aPoint[2] = 0.0;
                 if ((isWithinArea(PLAYER_FORCE,aPoint,60)) AND (NOT InHotSpot(CLAN_FORCE,702,5954,120))) then
                       Obj_1_Action_1_Success = TRUE;
                 else
                       if (gettimeleft == 0.0) then
                             SetObjectiveStatus(1,FAILED);
                             playBetty(BETTY_CANNOT_COMP_OBJ);
                             Objective_1_Decided = TRUE;
                       endif;
                 endif;


                 if ((Obj_1_Action_1_Success) AND (Obj_1_Action_2_Success)) then
                       SetObjectiveStatus(1,SUCCESS);
                       playBetty(BETTY_OBJECTIVE_COMPLETE);
                       VictoryLevel = VictoryLevel + 1;
                       Objective_1_Decided = TRUE;
                       if (VictoryLevel < 2) then
                             PlayDigitalMusic(OBJECTIVE_SUCCESS_MUSIC);
                       endif;
                 endif;

            else
                  if (NOT ExitTimerSet) then        
                        //if Failed primary Objective, fail mission
                        if (checkObjectiveStatus(1) == FAILED) then
                              setTimer(EXIT_TIMER,2.0);
                              ExitTimerSet = TRUE;
                        endif;
                  endif;
            endif;

            if (checkObjectiveStatus(2) == INCOMPLETE) then

                 if (SecondarySuccess == TRUE) then
                       Obj_2_Action_1_Success = TRUE;
                 else
                       if (gettimeleft == 0.0) then
                             SetObjectiveStatus(2,FAILED);
                             playBetty(BETTY_SECONDARY_FAILED);
                             Objective_2_Decided = TRUE;
                             PlayDigitalMusic(OBJECTIVE_FAIL_MUSIC);
                       endif;
                 endif;

                 if (VictoryLevel >= 2) then
                       SetObjectiveStatus(2,FAILED);
                       Objective_2_Decided = TRUE;
                 endif;

                 if ((Obj_2_Action_1_Success) AND (Obj_2_Action_2_Success)) then
                       SetObjectiveStatus(2,SUCCESS);
                       playBetty(BETTY_OBJECTIVE_COMPLETE);
                       SetObjectiveStatus(2,SUCCESS);
                       Objective_2_Decided = TRUE;
                       if (VictoryLevel < 2) then
                             PlayDigitalMusic(OBJECTIVE_SUCCESS_MUSIC);
                       endif;
                 endif;

            endif;

            if (checkObjectiveStatus(3) == INCOMPLETE) then

                 x = getterrainobjectpartid(8,347);
                 if (IsCaptured(x) == 1) then
                       Obj_3_Action_1_Success = TRUE;
                 else
                       if ((gettimeleft == 0.0) OR (getObjectDamage(x) > 99)) then
                             SetObjectiveStatus(3,FAILED);
                             playBetty(BETTY_SECONDARY_FAILED);
                             Objective_3_Decided = TRUE;
                             PlayDigitalMusic(OBJECTIVE_FAIL_MUSIC);
                       endif;
                 endif;

                 x = getTerrainObjectPartID(8,349);
                 if (IsCaptured(x) == 1) then
                       Obj_3_Action_2_Success = TRUE;
                 else
                       if ((gettimeleft == 0.0) OR (getObjectDamage(x) > 99)) then
                             SetObjectiveStatus(3,FAILED);
                             playBetty(BETTY_SECONDARY_FAILED);
                             Objective_3_Decided = TRUE;
                             PlayDigitalMusic(OBJECTIVE_FAIL_MUSIC);
                       endif;
                 endif;

                 if (VictoryLevel >= 2) then
                       SetObjectiveStatus(3,FAILED);
                       Objective_3_Decided = TRUE;
                 endif;

                 if ((Obj_3_Action_1_Success) AND (Obj_3_Action_2_Success) AND (Obj_3_Action_3_Success)) then
                       SetObjectiveStatus(3,SUCCESS);
                       playBetty(BETTY_OBJECTIVE_COMPLETE);
                       SetObjectiveStatus(3,SUCCESS);
                       Objective_3_Decided = TRUE;
                       if (VictoryLevel < 2) then
                             PlayDigitalMusic(OBJECTIVE_SUCCESS_MUSIC);
                       endif;
                 endif;

            endif;

            if ((NOT ExitTimerSet) AND (Objective_0_Decided) AND (Objective_1_Decided) AND (Objective_2_Decided) AND (Objective_3_Decided)) then
                  setTimer(EXIT_TIMER,2.0);
                  ExitTimerSet = TRUE;
            endif;

            //---------------------------------------
            // END SCENARIO
            //---------------------------------------

            if ((ExitTimerSet) AND (CheckTimer(EXIT_TIMER) == 0.0)) then
                  if (VictoryLevel >= 2) then
                        ScenarioResult = PLAYER_WIN_BIG;
                        PlayDigitalMusic(VICTORY_MUSIC);
                  else
                        ScenarioResult = PLAYER_LOST_BIG;
                        PlayDigitalMusic(DEFEAT_MUSIC);
                  endif;
            endif;

            //---------------------------------------
            // RETURN RESULT
            //---------------------------------------

            return (ScenarioResult);
endmodule.
//******************************************************************
