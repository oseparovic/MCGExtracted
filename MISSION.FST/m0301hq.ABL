//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:2/16/98   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0301hq : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;

         // Paths

         Path1[0,0] = 7065; // X
         Path1[0,1] = 1239; // Y

         Path1[1,0] = 7115; // X
         Path1[1,1] = 229; // Y

         Path1[2,0] = 7182; // X
         Path1[2,1] = -800; // Y

         Path1[3,0] = 7182; // X
         Path1[3,1] = -1570; // Y

         Path1[4,0] = 6182; // X
         Path1[4,1] = -1570; // Y

         Path1[5,0] = 5424; // X
         Path1[5,1] = -1570; // Y

         Path1[6,0] = 5424; // X
         Path1[6,1] = -1820; // Y

         Path1[7,0] = 4424; // X
         Path1[7,1] = -1820; // Y

         Path1[8,0] = 3600; // X
         Path1[8,1] = -1820; // Y

         Path1[9,0] = 3600; // X
         Path1[9,1] = -2214; // Y

         Path1[10,0] = 2800; // X
         Path1[10,1] = -2214; // Y

         Path1[11,0] = 2208; // X
         Path1[11,1] = -2214; // Y

         Path1[12,0] = 2208; // X
         Path1[12,1] = -3000; // Y

         Path1[13,0] = 2208; // X
         Path1[13,1] = -3600; // Y

         Path1[14,0] = 2085; // X
         Path1[14,1] = -4112; // Y

         Path1[15,0] = 1445; // X
         Path1[15,1] = -4141; // Y

         Path1[16,0] = 687; // X
         Path1[16,1] = -4248; // Y

         Path1[17,0] = 687; // X
         Path1[17,1] = -3237; // Y

         Path1[18,0] = 25; // X
         Path1[18,1] = -3229; // Y

         Path1[19,0] = 25; // X
         Path1[19,1] = -2735; // Y

         SetEngageRadius(200);
         StopFighting;
         SetSpeed(RUN);
         ReturnFireOFF;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (beenHit) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag1 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (flag1) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Order3Status = MovePath(Path1,20);
              if (Order3Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order3Status <> INCOMPLETE) then
                   // Order  4 
                   if (Order4Status == INCOMPLETE) then
                        StartFighting;
                        Order4Status = SUCCESS;
                   endif;
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
