//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/15/98   BY:Mike Lee
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0505BigSweep2 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;
    static integer                     Order10Status;

    // PATHS
    static path                        Path1;
    static path                        RidgePath;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;
         Order10Status = INCOMPLETE;

         // Paths

         Path1[0,0] = -8011; // X
         Path1[0,1] = -950; // Y

         Path1[1,0] = -4622; // X
         Path1[1,1] = -3406; // Y

         Path1[2,0] = -2887; // X
         Path1[2,1] = -4675; // Y

         Path1[3,0] = -573; // X
         Path1[3,1] = -8125; // Y

         Path1[4,0] = 2237; // X
         Path1[4,1] = -7998; // Y

         Path1[5,0] = 4542; // X
         Path1[5,1] = -5408; // Y

         Path1[6,0] = 4156; // X
         Path1[6,1] = -2748; // Y

         Path1[7,0] = 4289; // X
         Path1[7,1] = 702; // Y

         Path1[8,0] = 4681; // X
         Path1[8,1] = 4799; // Y

         RidgePath[0,0] = 3414; // X
         RidgePath[0,1] = 7225; // Y

         RidgePath[1,0] = 2113; // X
         RidgePath[1,1] = 7358; // Y

         RidgePath[2,0] = 324; // X
         RidgePath[2,1] = 7343; // Y

         RidgePath[3,0] = -2886; // X
         RidgePath[3,1] = 7233; // Y

         RidgePath[4,0] = -3647; // X
         RidgePath[4,1] = 6585; // Y

         SetEngageRadius(600);
         SetDisEngageRadius(600);
         SetSpeed(RUN);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (beenHit) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (gametime > 480) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order3Status = SUCCESS;
         endif;
    endif;
    if (inHotSpot(PLAYER_FORCE,-9360,165,150)) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order4Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(ObTower1) > 0) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order5Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(ObTower2) > 0) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order6Status = SUCCESS;
         endif;
    endif;
    if (getObjectDamage(ObTower3) > 0) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Flag6 = TRUE;
              Order7Status = SUCCESS;
         endif;
    endif;
    if (flag6) then
         // Order  8 
         if (Order8Status == INCOMPLETE) then
              orderPowerUp;
              Order8Status = SUCCESS;
         else
              if (Order8Status <> INCOMPLETE) then
                   // Order  9 
                   if (Order9Status == INCOMPLETE) then
                        Order9Status = Patrol(Path1,9,PATROL_AND_STOP,1);
                        if (Order9Status == INCOMPLETE) then
                             return(1);
                        endif;
                   else
                        if (Order9Status <> INCOMPLETE) then
                             // Order  10 
                             if (Order10Status == INCOMPLETE) then
                                  Order10Status = Patrol(RidgePath,5,PATROL_BACK_AND_FORTH,999);
                                  if (Order10Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              orderPowerDown;
              Order1Status = SUCCESS;
         endif;
    endif;

         return(1);
endmodule.
