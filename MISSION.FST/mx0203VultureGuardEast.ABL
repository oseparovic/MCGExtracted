//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:11/16/98   BY:joe sislow
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBmx0203VultureGuardEast : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;

    // PATHS
    static path                        PatrolEast;
    static path                        PatrolWest;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;

         // Paths

         PatrolEast[0,0] = -5564; // X
         PatrolEast[0,1] = -312; // Y

         PatrolEast[1,0] = -5564; // X
         PatrolEast[1,1] = -713; // Y

         PatrolEast[2,0] = -6201; // X
         PatrolEast[2,1] = -713; // Y

         PatrolEast[3,0] = -6201; // X
         PatrolEast[3,1] = -1327; // Y

         PatrolWest[0,0] = -5558; // X
         PatrolWest[0,1] = -171; // Y

         PatrolWest[1,0] = -5558; // X
         PatrolWest[1,1] = 337; // Y

         PatrolWest[2,0] = -6228; // X
         PatrolWest[2,1] = 337; // Y

         PatrolWest[3,0] = -6228; // X
         PatrolWest[3,1] = 830; // Y

         SetEngageRadius(150);
         SetDisEngageRadius(850);
         IdentifySensorContactsOFF;
         MoveToEngageOFF;
         SetTactic(TACTIC_LONG);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (beenHit) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag8 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (flag8) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              SetEngageRadius(1000);
              Order3Status = SUCCESS;
         endif;
    endif;
    if ((inHotSpot(PLAYER_FORCE,-4940,670,100)) AND (flag8 == TRUE)) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Order5Status = MoveTo(-5620,415);
              if (Order5Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if ((inHotSpot(PLAYER_FORCE,-4950,-100,100)) AND (flag8 == TRUE)) then
         // Order  6 
         if (Order6Status == INCOMPLETE) then
              Order6Status = MoveTo(-5557,-780);
              if (Order6Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if ((inHotSpot(PLAYER_FORCE,-5950,-1980,100)) AND (flag8 == TRUE)) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              Order7Status = MoveTo(-6030,-900);
              if (Order7Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Patrol(PatrolEast,4,PATROL_BACK_AND_FORTH, 5000000);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status == FAILED) then
                   // Order  4 
                   if (Order4Status == INCOMPLETE) then
                        Order4Status = Attack;
                        if (Order4Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
