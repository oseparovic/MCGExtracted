//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/5/98   BY:david abzug
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0501cplt3 : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;

    // PATHS
    static path                        Path1;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;

         // Paths

         Path1[0,0] = -735; // X
         Path1[0,1] = 2561; // Y

         Path1[1,0] = -735; // X
         Path1[1,1] = 1500; // Y

         Path1[2,0] = -735; // X
         Path1[2,1] = 564; // Y

         Path1[3,0] = -1000; // X
         Path1[3,1] = -247; // Y

         Path1[4,0] = -1324; // X
         Path1[4,1] = -1107; // Y

         SetEngageRadius(250);
         SetDisEngageRadius(550);
         SetSpeed(RUN);
         MoveAndFireON;

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (beenHit) then
         // Order  2 
         if (Order2Status == INCOMPLETE) then
              Flag1 = TRUE;
              Order2Status = SUCCESS;
         endif;
    endif;
    if (flag1) then
         // Order  3 
         if (Order3Status == INCOMPLETE) then
              SetEngageRadius(375);
              Order3Status = SUCCESS;
         endif;
    endif;
    if (flag2) then
         // Order  7 
         if (Order7Status == INCOMPLETE) then
              ResetPath;
              Order7Status = SUCCESS;
         endif;
    endif;
    if (flag1) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              Order4Status = MoveTo(-744,3490);
              if (Order4Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;
    if (inHotSpot(getVehicleID(ALLIED_FORCE,0,0),-735,2508,75.0)) then
         // Order  5 
         if (Order5Status == INCOMPLETE) then
              Order5Status = MoveTo(-738,900);
              if (Order5Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order5Status == SUCCESS) then
                   // Order  6 
                   if (Order6Status == INCOMPLETE) then
                        Order6Status = AttackObject(getTerrainObjectPartID(14,354),TRUE,TRUE);
                        if (Order6Status == INCOMPLETE) then
                             return(1);
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (flag2) then
         // Order  8 
         if (Order8Status == INCOMPLETE) then
              Order8Status = Guard(getVehicleID(ALLIED_FORCE, 0, 0));
              if (Order8Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = Attack;
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         endif;
    endif;

         return(1);
endmodule.
