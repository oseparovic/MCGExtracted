//****************************************************************************************//
//
//    UNIVERSAL WARRIOR BRAIN     CREATED:5/7/98   BY:Tim Ryan
//                              by the MechCommander(TM) Data Entry Application
//
//   Modification, duplication & distribution is strictly limited to non-commercial
//   enterprise unless otherwise indicated by FASA Interactive Technologies, Inc.
//
//           Copyright 1997 FASA Interactive Technologies, Inc.
//****************************************************************************************//

module WBm0404_VL : integer;

//****************************************************************************************//

const
    #include_ "OConst.abi"
    #include_ "UnitConst.abi"
type

var

    //-------------------------------------
    // Enter Additional Variables Here

    static integer                     Order1Status;
    static integer                     Order2Status;
    static integer                     Order3Status;
    static integer                     Order4Status;
    static integer                     Order5Status;
    static integer                     Order6Status;
    static integer                     Order7Status;
    static integer                     Order8Status;
    static integer                     Order9Status;
    static integer                     Order10Status;
    static integer                     Order11Status;
    static integer                     Order12Status;

    // PATHS
    static path                        PathByBridge;

//----------------------------------------------------------------------------------------
function Init;

    code
         #include_ "UBInit.abi"
         //----------------------------------------
         // Enter Initial Behavior Variations Here

         // OrderStatus
         Order1Status = INCOMPLETE;
         Order2Status = INCOMPLETE;
         Order3Status = INCOMPLETE;
         Order4Status = INCOMPLETE;
         Order5Status = INCOMPLETE;
         Order6Status = INCOMPLETE;
         Order7Status = INCOMPLETE;
         Order8Status = INCOMPLETE;
         Order9Status = INCOMPLETE;
         Order10Status = INCOMPLETE;
         Order11Status = INCOMPLETE;
         Order12Status = INCOMPLETE;

         // Paths

         PathByBridge[0,0] = -5982; // X
         PathByBridge[0,1] = -2101; // Y

         PathByBridge[1,0] = -5800; // X
         PathByBridge[1,1] = 2400; // Y

         SetEngageRadius(300);

endfunction;
//----------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------
// Main Code
//----------------------------------------------------------------------------------------

code

    //Initialize Orders Library
    initOrders;

    if (flag9) then
         // Order  4 
         if (Order4Status == INCOMPLETE) then
              MoveAndFireON;
              Order4Status = SUCCESS;
         else
              if (Order4Status <> INCOMPLETE) then
                   // Order  5 
                   if (Order5Status == INCOMPLETE) then
                        SetMinimumDistance(30);
                        Order5Status = SUCCESS;
                   else
                        if (Order5Status <> INCOMPLETE) then
                             // Order  6 
                             if (Order6Status == INCOMPLETE) then
                                  Order6Status = MoveTo(-4444,2929);
                                  if (Order6Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             else
                                  if (Order6Status == SUCCESS) then
                                       // Order  7 
                                       if (Order7Status == INCOMPLETE) then
                                            Order7Status = AttackObject(ubunker,FALSE,FALSE);
                                            if (Order7Status == INCOMPLETE) then
                                                 return(1);
                                            endif;
                                       else
                                            if (Order7Status <> INCOMPLETE) then
                                                 // Order  8 
                                                 if (Order8Status == INCOMPLETE) then
                                                      Order8Status = AttackObject(ubunker2,FALSE,FALSE);
                                                      if (Order8Status == INCOMPLETE) then
                                                           return(1);
                                                      endif;
                                                 else
                                                      if (Order8Status <> INCOMPLETE) then
                                                           // Order  9 
                                                           if (Order9Status == INCOMPLETE) then
                                                                Order9Status = Attack;
                                                                if (Order9Status == INCOMPLETE) then
                                                                     return(1);
                                                                endif;
                                                           endif;
                                                      endif;
                                                 endif;
                                            endif;
                                       endif;
                                  endif;
                                  if (Order6Status == FAILED) then
                                       // Order  10 
                                       if (Order10Status == INCOMPLETE) then
                                            Order10Status = Attack;
                                            if (Order10Status == INCOMPLETE) then
                                                 return(1);
                                            endif;
                                       endif;
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;
    if (beenHit) then
         // Order  11 
         if (Order11Status == INCOMPLETE) then
              Flag1 = TRUE;
              Order11Status = SUCCESS;
         endif;
    endif;
    if (flag1) then
         // Order  12 
         if (Order12Status == INCOMPLETE) then
              SetEngageRadius(1500);
              Order12Status = SUCCESS;
         endif;
    endif;

    if (TRUE) then
         // Order  1 
         if (Order1Status == INCOMPLETE) then
              Order1Status = MovePath(PathByBridge,2);
              if (Order1Status == INCOMPLETE) then
                   return(1);
              endif;
         else
              if (Order1Status <> INCOMPLETE) then
                   // Order  2 
                   if (Order2Status == INCOMPLETE) then
                        SetMinimumDistance((Me - CLAN_VEHICLE0_STAR0 + 1)  * 30);
                        Order2Status = SUCCESS;
                   else
                        if (Order2Status <> INCOMPLETE) then
                             // Order  3 
                             if (Order3Status == INCOMPLETE) then
                                  Order3Status = Sentry(-4750,2400);
                                  if (Order3Status == INCOMPLETE) then
                                       return(1);
                                  endif;
                             endif;
                        endif;
                   endif;
              endif;
         endif;
    endif;

         return(1);
endmodule.
